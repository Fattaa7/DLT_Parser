package viewer;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

abstract class Argument {
    protected static final int TYPE_INFO_LENGTH = 4;
    protected static Boolean msbFirstDefault = true; // or false, as per your logic

    protected Boolean msbFirst;

    public Argument(Boolean msbFirst) {
        this.msbFirst = msbFirst;
    }

    @Override
    public String toString() {
        return _toStr();
    }

    protected abstract int getTypeInfo();
    public abstract byte[] toBytes(Boolean msbFirst);
    public abstract String _toStr();
    public abstract int getDataPayloadLength();
    public abstract byte[] dataPayloadToBytes(Boolean msbFirst);

    public static Argument createFromBytes(byte[] data, Boolean msbFirst, String encoding) {
        ByteOrder byteOrder = msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN;
        ByteBuffer buffer = ByteBuffer.wrap(data).order(byteOrder);
        int typeInfo = buffer.getInt();
        int typeInfoBase = typeInfo & BitMasks.MASK_BASE_TYPE;
        Argument argument = null;

        if (typeInfoBase == TypeInfo.TYPE_BOOL.getValue()) {
            argument = ArgumentBool.fromDataPayload(getDataPayload(data), msbFirst);
        } else if (typeInfoBase == TypeInfo.TYPE_SIGNED.getValue()) {
            int typeInfoLength = typeInfo & BitMasks.MASK_TYPE_LENGTH;
            switch (typeInfoLength) {
                case TypeInfo.TYPE_LENGTH_8BIT.getValue():
                    argument = ArgumentSInt8.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_16BIT.getValue():
                    argument = ArgumentSInt16.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_32BIT.getValue():
                    argument = ArgumentSInt32.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_64BIT.getValue():
                    argument = ArgumentSInt64.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                default:
                    throw new IllegalArgumentException("Unsupported TypeInfo: " + Integer.toBinaryString(typeInfo));
            }
        } else if (typeInfoBase == TypeInfo.TYPE_UNSIGNED.getValue()) {
            int typeInfoLength = typeInfo & Mask.TYPE_LENGTH;
            switch (typeInfoLength) {
                case TypeInfo.TYPE_LENGTH_8BIT.getValue():
                    argument = ArgumentUInt8.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_16BIT.getValue():
                    argument = ArgumentUInt16.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_32BIT.getValue():
                    argument = ArgumentUInt32.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_64BIT.getValue():
                    argument = ArgumentUInt64.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                default:
                    throw new IllegalArgumentException("Unsupported TypeInfo: " + Integer.toBinaryString(typeInfo));
            }
        } else if (typeInfoBase == TypeInfo.TYPE_FLOAT.getValue()) {
            int typeInfoLength = typeInfo & Mask.TYPE_LENGTH;
            switch (typeInfoLength) {
                case TypeInfo.TYPE_LENGTH_32BIT.getValue():
                    argument = ArgumentFloat32.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_64BIT.getValue():
                    argument = ArgumentFloat64.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                default:
                    throw new IllegalArgumentException("Unsupported TypeInfo: " + Integer.toBinaryString(typeInfo));
            }
        } else if (typeInfoBase == TypeInfo.TYPE_STRING.getValue()) {
            int stringCoding = typeInfo & Mask.STRING_CODING;
            if (stringCoding == TypeInfo.STRING_CODING_ASCII.getValue()) {
                argument = ArgumentString.fromDataPayload(getDataPayload(data), false, msbFirst, encoding);
            } else if (stringCoding == TypeInfo.STRING_CODING_UTF8.getValue()) {
                argument = ArgumentString.fromDataPayload(getDataPayload(data), true, msbFirst);
            } else {
                throw new IllegalArgumentException("Unsupported String Coding: " + Integer.toBinaryString(typeInfo));
            }
        } else if (typeInfoBase == TypeInfo.TYPE_RAW.getValue()) {
            argument = ArgumentRaw.fromDataPayload(getDataPayload(data), msbFirst);
        }

        if (argument == null) {
            throw new IllegalArgumentException("Unsupported TypeInfo: " + Integer.toBinaryString(typeInfo));
        }
        return argument;
    }

    private static byte[] getDataPayload(byte[] data) {
        byte[] payload = new byte[data.length - TYPE_INFO_LENGTH];
        System.arraycopy(data, TYPE_INFO_LENGTH, payload, 0, payload.length);
        return payload;
    }
}


//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
// Implement other argument types (ArgumentSInt8, ArgumentSInt16, ArgumentSInt32, etc.)


// Follow the same pattern for other types: ArgumentSInt16, ArgumentSInt32, ArgumentSInt64, ArgumentUInt8, ArgumentUInt16, ArgumentUInt32, ArgumentUInt64, ArgumentFloat32, ArgumentFloat64, ArgumentString, ArgumentRaw
abstract class ArgumentNumBase extends Argument {
    protected Object data;

    public ArgumentNumBase(Object data, Boolean msbFirst) {
        super(msbFirst);
        this.data = data;
    }

    protected abstract String getStructFormat();
    public abstract int getDataPayloadLength();
    protected abstract int getTypeInfo();

    @Override
	public String _toStr() {
        return data.toString();
    }

    @Override
    public byte[] toBytes(Boolean msbFirst) {
        return this.dataPayloadToBytes(msbFirst);
    }

    @Override
    public byte[] dataPayloadToBytes(Boolean msbFirst) {
        ByteOrder byteOrder = msbFirst != null
                ? (msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN)
                : (this.msbFirst != null
                ? (this.msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN)
                : ByteOrder.nativeOrder());

        ByteBuffer buffer = ByteBuffer.allocate(getDataPayloadLength()).order(byteOrder);
        switch (getStructFormat()) {
            case "?":
                buffer.put((byte) ((Boolean) data ? 1 : 0));
                break;
            case "B":
                buffer.put((byte) ((Integer) data & 0xFF));
                break;
            case "H":
                buffer.putShort((short) ((Integer) data & 0xFFFF));
                break;
            case "I":
                buffer.putInt((int) ((Long) data & 0xFFFFFFFF));
                break;
            case "Q":
                buffer.putLong((Long) data);
                break;
            case "b":
                buffer.put((byte) data);
                break;
            case "h":
                buffer.putShort((Short) data);
                break;
            case "i":
                buffer.putInt((Integer) data);
                break;
            case "q":
                buffer.putLong((Long) data);
                break;
            case "f":
                buffer.putFloat((Float) data);
                break;
            case "d":
                buffer.putDouble((Double) data);
                break;
            default:
                throw new IllegalArgumentException("Unsupported struct format: " + getStructFormat());
        }
        return buffer.array();
    }
}


class ArgumentBool extends ArgumentNumBase {
    public ArgumentBool(Boolean data, Boolean msbFirst) {
        super(data, msbFirst);
    }

    @Override
    protected int getTypeInfo() {
        return TypeInfo.TYPE_BOOL.getValue() | TypeInfo.TYPE_LENGTH_8BIT.getValue();
    }

    @Override
    protected String getStructFormat() {
        return "?";
    }

    @Override
	public int getDataPayloadLength() {
        return 1;
    }
}

class ArgumentUInt8 extends ArgumentNumBase {
    public ArgumentUInt8(Integer data, Boolean msbFirst) {
        super(data, msbFirst);
    }

    @Override
    protected int getTypeInfo() {
        return TypeInfo.TYPE_UNSIGNED.getValue() | TypeInfo.TYPE_LENGTH_8BIT.getValue();
    }

    @Override
    protected String getStructFormat() {
        return "B";
    }

    @Override
	public int getDataPayloadLength() {
        return 1;
    }
}
class ArgumentUInt16 extends ArgumentNumBase {
    public ArgumentUInt16(Integer data, Boolean msbFirst) {
        super(data, msbFirst);
    }

    @Override
    protected int getTypeInfo() {
        return TypeInfo.TYPE_UNSIGNED.getValue() | TypeInfo.TYPE_LENGTH_16BIT.getValue();
    }

    @Override
    protected String getStructFormat() {
        return "H";
    }

    @Override
	public int getDataPayloadLength() {
        return 2;
    }
}

class ArgumentUInt32 extends ArgumentNumBase {
    public ArgumentUInt32(Integer data, Boolean msbFirst) {
        super(data, msbFirst);
    }

    @Override
    protected int getTypeInfo() {
        return TypeInfo.TYPE_UNSIGNED.getValue() | TypeInfo.TYPE_LENGTH_32BIT.getValue();
    }

    @Override
    protected String getStructFormat() {
        return "I";
    }

    @Override
	public int getDataPayloadLength() {
        return 4;
    }
}

class ArgumentUInt64 extends ArgumentNumBase {
    public ArgumentUInt64(Integer data, Boolean msbFirst) {
        super(data, msbFirst);
    }

    @Override
    protected int getTypeInfo() {
        return TypeInfo.TYPE_UNSIGNED.getValue() | TypeInfo.TYPE_LENGTH_64BIT.getValue();
    }

    @Override
    protected String getStructFormat() {
        return "Q";
    }

    @Override
	public int getDataPayloadLength() {
        return 8;
    }
}


class ArgumentSInt8 extends ArgumentNumBase {
    public ArgumentSInt8(Integer data, Boolean msbFirst) {
        super(data, msbFirst);
    }

    @Override
    protected int getTypeInfo() {
        return TypeInfo.TYPE_SIGNED.getValue() | TypeInfo.TYPE_LENGTH_8BIT.getValue();
    }

    @Override
    protected String getStructFormat() {
        return "b";
    }

    @Override
	public int getDataPayloadLength() {
        return 1;
    }
}


class ArgumentSInt16 extends ArgumentNumBase {
    public ArgumentSInt16(Integer data, Boolean msbFirst) {
        super(data, msbFirst);
    }

    @Override
    protected int getTypeInfo() {
        return TypeInfo.TYPE_SIGNED.getValue() | TypeInfo.TYPE_LENGTH_16BIT.getValue();
    }

    @Override
    protected String getStructFormat() {
        return "h";
    }

    @Override
	public int getDataPayloadLength() {
        return 2;
    }
}

class ArgumentSInt32 extends ArgumentNumBase {
    public ArgumentSInt32(Integer data, Boolean msbFirst) {
        super(data, msbFirst);
    }

    @Override
    protected int getTypeInfo() {
        return TypeInfo.TYPE_SIGNED.getValue() | TypeInfo.TYPE_LENGTH_32BIT.getValue();
    }

    @Override
    protected String getStructFormat() {
        return "i";
    }

    @Override
	public int getDataPayloadLength() {
        return 4;
    }
}

class ArgumentSInt64 extends ArgumentNumBase {
    public ArgumentSInt64(Integer data, Boolean msbFirst) {
        super(data, msbFirst);
    }

    @Override
    protected int getTypeInfo() {
        return TypeInfo.TYPE_SIGNED.getValue() | TypeInfo.TYPE_LENGTH_64BIT.getValue();
    }

    @Override
    protected String getStructFormat() {
        return "q";
    }

    @Override
	public int getDataPayloadLength() {
        return 8;
    }
}

class ArgumentFloat32 extends ArgumentNumBase {
    public ArgumentFloat32(Integer data, Boolean msbFirst) {
        super(data, msbFirst);
    }

    @Override
    protected int getTypeInfo() {
        return TypeInfo.TYPE_FLOAT.getValue() | TypeInfo.TYPE_LENGTH_32BIT.getValue();
    }

    @Override
    protected String getStructFormat() {
        return "f";
    }

    @Override
	public int getDataPayloadLength() {
        return 4;
    }
}

class ArgumentFloat64 extends ArgumentNumBase {
    public ArgumentFloat64(Integer data, Boolean msbFirst) {
        super(data, msbFirst);
    }

    @Override
    protected int getTypeInfo() {
        return TypeInfo.TYPE_FLOAT.getValue() | TypeInfo.TYPE_LENGTH_64BIT.getValue();
    }

    @Override
    protected String getStructFormat() {
        return "d";
    }

    @Override
	public int getDataPayloadLength() {
        return 8;
    }
}






// Add the remaining classes (ArgumentUInt16, ArgumentUInt32, ArgumentUInt64, ArgumentSInt8, etc.)
// using the same pattern, ensuring the `getStructFormat` and `getDataPayloadLength` align with the Python version.


// Raw Argument - placeholder for raw bytes.

abstract class ArgumentByteBase extends Argument {
    // Constant for the size of the length field (2 bytes)
    protected static final int LENGTH_SIZE = 2;

    public ArgumentByteBase(Boolean msbFirst) {
        super(msbFirst);
    }

    /**
     * Get the total length of the data payload, including the length field and the data.
     * 
     * @return the total length of the data payload.
     */
    public int getDataPayloadLength() {
        return LENGTH_SIZE + getDataLength();
    }

    /**
     * Abstract method to get the data length.
     * Subclasses must implement this method.
     * 
     * @return the length of the data.
     */
    protected abstract int getDataLength();

    /**
     * Converts the data payload to bytes, including the length field and the actual data.
     * 
     * @param msbFirst Determines the byte order: true for big-endian, false for little-endian.
     *                 If null, uses the default for the instance or a global default.
     * @return the byte array representing the data payload.
     */
    @Override
    public byte[] dataPayloadToBytes(Boolean msbFirst) {
        ByteOrder byteOrder = getByteOrder(msbFirst);

        ByteBuffer buffer = ByteBuffer.allocate(getDataPayloadLength()).order(byteOrder);
        buffer.putShort((short) getDataLength());
        buffer.put(dataToBytes());
        return buffer.array();
    }

    /**
     * Abstract method to convert the actual data to bytes.
     * Subclasses must implement this method.
     * 
     * @return the byte array representing the actual data.
     */
    protected abstract byte[] dataToBytes();

    /**
     * Determines the byte order based on the provided value, instance default, or global default.
     * 
     * @param msbFirst The explicit byte order (true for big-endian, false for little-endian).
     * @return the resolved byte order.
     */
    private ByteOrder getByteOrder(Boolean msbFirst) {
        if (msbFirst != null) {
            return msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN;
        } else if (this.msbFirst != null) {
            return this.msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN;
        } else if (Argument.msbFirstDefault != null) {
            return Argument.msbFirstDefault ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN;
        } else {
            throw new IllegalArgumentException("Endian is not known");
        }
    }
}

class ArgumentString extends ArgumentByteBase {
    private final String data;
    private final boolean isUtf8;
    private final Charset encoding;

    public ArgumentString(String data, boolean isUtf8, Boolean msbFirst, Charset encoding) {
        super(msbFirst);
        this.data = data;
        this.isUtf8 = isUtf8;
        this.encoding = isUtf8 ? StandardCharsets.UTF_8 : (encoding != null ? encoding : StandardCharsets.US_ASCII);
    }

    @Override
    protected int getDataLength() {
        return data.getBytes(encoding).length + 1; // +1 for the null terminator
    }

    @Override
    protected byte[] dataToBytes() {
        byte[] encodedData = data.getBytes(encoding);
        byte[] result = new byte[encodedData.length + 1];
        System.arraycopy(encodedData, 0, result, 0, encodedData.length);
        result[encodedData.length] = 0; // Null terminator
        return result;
    }

    public static ArgumentString fromDataPayload(byte[] dataPayload, boolean isUtf8, Boolean msbFirst, Charset encoding) {
        ByteOrder byteOrder = msbFirst != null && msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN;
        ByteBuffer buffer = ByteBuffer.wrap(dataPayload).order(byteOrder);
        int length = Short.toUnsignedInt(buffer.getShort());

        Charset selectedEncoding = isUtf8 ? StandardCharsets.UTF_8 : (encoding != null ? encoding : StandardCharsets.US_ASCII);
        String data = new String(dataPayload, LENGTH_SIZE, length - 1, selectedEncoding);

        return new ArgumentString(data, isUtf8, msbFirst, encoding);
    }

    public String toStr() {
        return data;
    }

    public int getTypeInfo() {
        int typeInfo = TypeInfo.TYPE_STRING.getValue();
        if (isUtf8) {
            typeInfo |= TypeInfo.STRING_CODING_UTF8.getValue();
        }
        return typeInfo;
    }

    @Override
    public byte[] toBytes(Boolean msbFirst) {
        if (msbFirst == null) {
            throw new IllegalArgumentException("msbFirst cannot be null");
        }

        // Determine the endianness
        ByteOrder byteOrder = msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN;

        // Serialize data
        try {
            ByteBuffer buffer = ByteBuffer.allocate(2 + data.getBytes(_encoding).length + 1); // Length + data + null terminator
            buffer.order(byteOrder);

            // Add length prefix
            buffer.putShort((short) dataLength());

            // Add data
            buffer.put(data.getBytes(_encoding));

            // Add null terminator
            buffer.put((byte) 0);

            return buffer.array();
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException("Encoding not supported: " + _encoding, e);
        }
    }


	@Override
	public String _toStr() {
		// TODO Auto-generated method stub
        return data;
	}
}


