package viewer;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

abstract class Argument {
    protected static final int TYPE_INFO_LENGTH = 4;
    protected Boolean msbFirst;

    public Argument(Boolean msbFirst) {
        this.msbFirst = msbFirst;
    }

    @Override
    public String toString() {
        return _toStr();
    }

    protected abstract int getTypeInfo();
    public abstract byte[] toBytes(Boolean msbFirst);
    public abstract String _toStr();
    public abstract int getDataPayloadLength();
    public abstract byte[] dataPayloadToBytes(Boolean msbFirst);

    public static Argument createFromBytes(byte[] data, Boolean msbFirst, String encoding) {
        ByteOrder byteOrder = msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN;
        ByteBuffer buffer = ByteBuffer.wrap(data).order(byteOrder);
        int typeInfo = buffer.getInt();
        int typeInfoBase = typeInfo & BitMasks.MASK_BASE_TYPE;
        Argument argument = null;

        if (typeInfoBase == TypeInfo.TYPE_BOOL.getValue()) {
            argument = ArgumentBool.fromDataPayload(getDataPayload(data), msbFirst);
        } else if (typeInfoBase == TypeInfo.TYPE_SIGNED.getValue()) {
            int typeInfoLength = typeInfo & BitMasks.MASK_TYPE_LENGTH;
            switch (typeInfoLength) {
                case TypeInfo.TYPE_LENGTH_8BIT.getValue():
                    argument = ArgumentSInt8.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_16BIT.getValue():
                    argument = ArgumentSInt16.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_32BIT.getValue():
                    argument = ArgumentSInt32.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_64BIT.getValue():
                    argument = ArgumentSInt64.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                default:
                    throw new IllegalArgumentException("Unsupported TypeInfo: " + Integer.toBinaryString(typeInfo));
            }
        } else if (typeInfoBase == TypeInfo.TYPE_UNSIGNED.getValue()) {
            int typeInfoLength = typeInfo & Mask.TYPE_LENGTH;
            switch (typeInfoLength) {
                case TypeInfo.TYPE_LENGTH_8BIT.getValue():
                    argument = ArgumentUInt8.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_16BIT.getValue():
                    argument = ArgumentUInt16.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_32BIT.getValue():
                    argument = ArgumentUInt32.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_64BIT.getValue():
                    argument = ArgumentUInt64.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                default:
                    throw new IllegalArgumentException("Unsupported TypeInfo: " + Integer.toBinaryString(typeInfo));
            }
        } else if (typeInfoBase == TypeInfo.TYPE_FLOAT.getValue()) {
            int typeInfoLength = typeInfo & Mask.TYPE_LENGTH;
            switch (typeInfoLength) {
                case TypeInfo.TYPE_LENGTH_32BIT.getValue():
                    argument = ArgumentFloat32.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                case TypeInfo.TYPE_LENGTH_64BIT.getValue():
                    argument = ArgumentFloat64.fromDataPayload(getDataPayload(data), msbFirst);
                    break;
                default:
                    throw new IllegalArgumentException("Unsupported TypeInfo: " + Integer.toBinaryString(typeInfo));
            }
        } else if (typeInfoBase == TypeInfo.TYPE_STRING.getValue()) {
            int stringCoding = typeInfo & Mask.STRING_CODING;
            if (stringCoding == TypeInfo.STRING_CODING_ASCII.getValue()) {
                argument = ArgumentString.fromDataPayload(getDataPayload(data), false, msbFirst, encoding);
            } else if (stringCoding == TypeInfo.STRING_CODING_UTF8.getValue()) {
                argument = ArgumentString.fromDataPayload(getDataPayload(data), true, msbFirst);
            } else {
                throw new IllegalArgumentException("Unsupported String Coding: " + Integer.toBinaryString(typeInfo));
            }
        } else if (typeInfoBase == TypeInfo.TYPE_RAW.getValue()) {
            argument = ArgumentRaw.fromDataPayload(getDataPayload(data), msbFirst);
        }

        if (argument == null) {
            throw new IllegalArgumentException("Unsupported TypeInfo: " + Integer.toBinaryString(typeInfo));
        }
        return argument;
    }

    private static byte[] getDataPayload(byte[] data) {
        byte[] payload = new byte[data.length - TYPE_INFO_LENGTH];
        System.arraycopy(data, TYPE_INFO_LENGTH, payload, 0, payload.length);
        return payload;
    }
}


//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
abstract class ArgumentNumBase extends Argument {
    protected Number data; // Data can be any numeric type (int, float, etc.)

    public ArgumentNumBase(Number data, Boolean msbFirst) {
        super(msbFirst);
        this.data = data;
    }

    // Define a format method for subclasses to override.
    public abstract int getDataPayloadLength();

    // Converts the data to string representation
    @Override
    public String _toStr() {
        return String.valueOf(data);
    }

    // Converts the data payload to bytes based on endianness
    @Override
    public byte[] dataPayloadToBytes(Boolean msbFirst) {
        ByteOrder byteOrder = msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN;
        ByteBuffer buffer = ByteBuffer.allocate(getDataPayloadLength()).order(byteOrder);

        if (data instanceof Byte) {
            buffer.put(data.byteValue());
        } else if (data instanceof Short) {
            buffer.putShort(data.shortValue());
        } else if (data instanceof Integer) {
            buffer.putInt(data.intValue());
        } else if (data instanceof Long) {
            buffer.putLong(data.longValue());
        } else if (data instanceof Float) {
            buffer.putFloat(data.floatValue());
        } else if (data instanceof Double) {
            buffer.putDouble(data.doubleValue());
        } else {
            throw new IllegalArgumentException("Unsupported data type: " + data.getClass().getName());
        }

        return buffer.array();
    }

    // Create an instance of the class from the data payload bytes
    public static ArgumentNumBase fromDataPayload(byte[] dataPayload, Boolean msbFirst, ArgumentNumBase prototype) {
        ByteOrder byteOrder = msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN;
        ByteBuffer buffer = ByteBuffer.wrap(dataPayload).order(byteOrder);

        Number value;

        if (prototype instanceof ArgumentUInt8 || prototype instanceof ArgumentSInt8) {
            value = buffer.get();
        } else if (prototype instanceof ArgumentUInt16 || prototype instanceof ArgumentSInt16) {
            value = buffer.getShort();
        } else if (prototype instanceof ArgumentUInt32 || prototype instanceof ArgumentSInt32) {
            value = buffer.getInt();
        } else if (prototype instanceof ArgumentUInt64 || prototype instanceof ArgumentSInt64) {
            value = buffer.getLong();
        } else if (prototype instanceof ArgumentFloat32) {
            value = buffer.getFloat();
        } else if (prototype instanceof ArgumentFloat64) {
            value = buffer.getDouble();
        } else {
            throw new IllegalArgumentException("Unsupported prototype type: " + prototype.getClass().getName());
        }

        try {
            return prototype.getClass()
                    .getDeclaredConstructor(Number.class, Boolean.class)
                    .newInstance(value, msbFirst);
        } catch (Exception e) {
            throw new IllegalStateException("Failed to create instance of " + prototype.getClass().getName(), e);
        }
    }
}

// Implement other argument types (ArgumentSInt8, ArgumentSInt16, ArgumentSInt32, etc.)

class ArgumentSInt8 extends ArgumentNumBase {
    public ArgumentSInt8(Boolean msbFirst) {
        super(null, msbFirst);
    }

    @Override
    public int getTypeInfo() {
        return TypeInfo.TYPE_SIGNED.getValue() | TypeInfo.TYPE_LENGTH_8BIT.getValue();
    }

    @Override
    public byte[] toBytes(Boolean msbFirst) {
        ByteBuffer buffer = ByteBuffer.allocate(1).order(msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN);
        buffer.put((byte) data);
        return buffer.array();
    }

    public static ArgumentSInt8 fromDataPayload(byte[] dataPayload, Boolean msbFirst) {
        ArgumentSInt8 argument = new ArgumentSInt8(msbFirst);
        argument.data = dataPayload[0];
        return argument;
    }

    @Override
    public String _toStr() {
        return data.toString();
    }
}

// Follow the same pattern for other types: ArgumentSInt16, ArgumentSInt32, ArgumentSInt64, ArgumentUInt8, ArgumentUInt16, ArgumentUInt32, ArgumentUInt64, ArgumentFloat32, ArgumentFloat64, ArgumentString, ArgumentRaw

class ArgumentString extends Argument {
    protected String data;

    public ArgumentString(Boolean msbFirst, String data) {
        super(msbFirst);
        this.data = data;
    }

    @Override
    public int getTypeInfo() {
        return TypeInfo.TYPE_STRING.getValue() | TypeInfo.STRING_CODING_UTF8.getValue();
    }

    @Override
    public byte[] toBytes(Boolean msbFirst) {
        byte[] dataBytes = data.getBytes(StandardCharsets.UTF_8);
        ByteBuffer buffer = ByteBuffer.allocate(4 + dataBytes.length).order(msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN);
        buffer.putInt(dataBytes.length);
        buffer.put(dataBytes);
        return buffer.array();
    }

    public static ArgumentString fromDataPayload(byte[] dataPayload, Boolean msbFirst) {
        ByteBuffer buffer = ByteBuffer.wrap(dataPayload).order(msbFirst ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN);
        int length = buffer.getInt();
        byte[] stringBytes = new byte[length];
        buffer.get(stringBytes);
        return new ArgumentString(msbFirst, new String(stringBytes, StandardCharsets.UTF_8));
    }

    @Override
    public String _toStr() {
        return data;
    }
}

// Raw Argument - placeholder for raw bytes.
class ArgumentRaw extends Argument {
    private byte[] data;

    public ArgumentRaw(Boolean msbFirst, byte[] data) {
        super(msbFirst);
        this.data = data;
    }

    @Override
    public int getTypeInfo() {
        return TypeInfo.TYPE_RAW.getValue();
    }

    @Override
    public byte[] toBytes(Boolean msbFirst) {
        return data;  // Directly return raw data
    }

    public static ArgumentRaw fromDataPayload(byte[] dataPayload, Boolean msbFirst) {
        return new ArgumentRaw(msbFirst, dataPayload);
    }

    @Override
    public String _toStr() {
        return Arrays.toString(data);
    }

	@Override
	public int getDataPayloadLength() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public byte[] dataPayloadToBytes(Boolean msbFirst) {
		// TODO Auto-generated method stub
		return null;
	}
}

